plugins {
    id "org.springframework.boot" version "2.6.1"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java-library"
    id "jacoco"
    id "org.liquibase.gradle" version "2.1.1"
}

group = "ru.softdarom.qrcheck"

jar {
    enabled = false
}

bootJar {
    archiveFileName = "events.jar"
}

configurations {
    annotationProcessor {
        extendsFrom compileOnly
    }

    testAnnotationProcessor {
        extendsFrom testCompileOnly
    }
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USERNAME")
            password = project.findProperty("gpr.token") ?: System.getenv("GPR_TOKEN")
        }
        url = uri("https://maven.pkg.github.com/softdarom/packages")
    }
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.0"
    }
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-web"
    api "org.springframework.boot:spring-boot-starter-actuator"
    api "org.springframework.boot:spring-boot-starter-data-jpa"
    api "org.springframework.boot:spring-boot-starter-validation"
    api "org.springframework.boot:spring-boot-starter-security"
    api "org.springframework.cloud:spring-cloud-starter-sleuth"
    api "org.springframework.cloud:spring-cloud-starter-openfeign"
    api "org.springframework.cloud:spring-cloud-starter-kubernetes-client-config"
    api "org.springframework.security.oauth:spring-security-oauth2:2.5.1.RELEASE"

    api "javax.validation:validation-api:2.0.1.Final"
    api "io.micrometer:micrometer-registry-prometheus:1.8.2"
    api "org.zalando:logbook-spring-boot-starter:2.14.0"
    api "p6spy:p6spy:3.9.1"
    api "org.modelmapper:modelmapper:2.4.5"
    api "org.springdoc:springdoc-openapi-ui:1.6.4"
    api "net.logstash.logback:logstash-logback-encoder:7.0.1"
    api "ru.softdarom.security:qrcheck-security-starter:1.2.0"
    api "net.minidev:json-smart:2.4.7"
    api "com.zaxxer:HikariCP:5.0.1"
    api "net.ttddyy:datasource-proxy:1.7"

    runtimeOnly "org.postgresql:postgresql:42.3.1"
    runtimeOnly "org.codehaus.groovy:groovy:3.0.9"

    compileOnly "org.projectlombok:lombok"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    testCompileOnly "org.projectlombok:lombok"
    testCompileOnly "org.springframework.boot:spring-boot-configuration-processor"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    liquibaseRuntime "org.liquibase:liquibase-core:3.10.3"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:3.0.2"
    liquibaseRuntime "ch.qos.logback:logback-classic:1.2.10"
    liquibaseRuntime "org.postgresql:postgresql:42.3.1"
    liquibaseRuntime "org.yaml:snakeyaml:1.29"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
    testImplementation "com.github.tomakehurst:wiremock:2.27.2"
}

jacocoTestReport {
    reports {
        xml {
            enabled true
            destination file("${buildDir}/jacoco/coverage.xml")
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.0
            }
        }
    }
}

test {
    useJUnitPlatform {
        includeTags "spring-mock", "spring-integration", "unit"
    }
    finalizedBy(jacocoTestReport, jacocoTestCoverageVerification)
}


liquibase {
    def properties = new Properties()
    def propertyFile = file(".deploy/ansible/configs/liquibase/liquibase.properties")

    if (propertyFile.exists()) {
        propertyFile.withInputStream { properties.load(it) }
    }

    var resourceDir = sourceSets.main.resources.srcDirs.first().absolutePath
    activities {
        main {
            changeLogFile properties.getOrDefault("changeLogFile", "${resourceDir}/liquibase/changelog.yaml")
            url properties.getOrDefault("url", "jdbc:postgresql://localhost:5432/qrcheck")
            defaultSchemaName properties.getOrDefault("schema", "events")
            username properties.getOrDefault("username", "liquibase")
            password properties.getOrDefault("password", "liquibase")
            contexts properties.getOrDefault("context", "local")
        }
    }
}

task liquibaseChangelogArchive(type: Zip) {
    from "$buildDir/resources/main/liquibase/"
    archiveName "sql.zip"
    destinationDirectory.set(file("$buildDir/liquibase"))
}

tasks.getByName("assemble").finalizedBy("liquibaseChangelogArchive")